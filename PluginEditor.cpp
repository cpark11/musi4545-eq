/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================

// PluginEditor Constructor:
Mu45effectAudioProcessorEditor::Mu45effectAudioProcessorEditor (Mu45effectAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    PluginParameter* param;
    
    //Mu45Param: Create a slider for each User Param
    param = processor.volumeUParam;     // get the corresponding parameter from the PluginProcessor
    volumeSlider = new Slider ("Volume Slider");
    volumeSlider->setRange(param->getActualMinimum(),
                           param->getActualMaximum(),
                           0.5);        //Mu45:  step size
    volumeSlider->setSliderStyle(Slider::LinearBarVertical);
    volumeSlider->setTextValueSuffix(param->getLabel());
    volumeSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
    volumeSlider->addListener (this);   // this is important!
    addAndMakeVisible(volumeSlider);    //so is this!
    
    //Mu45Param: You can also create a label for your slider if you like
    //volumeLabel = new Label("Volume Label", param->getName(10));
    //volumeLabel->attachToComponent(volumeSlider, false);
    //volumeLabel->setFont(Font(12.0));
    //addAndMakeVisible(volumeLabel);

	//low shelf cut
	lowShelfcut = new Slider("Low Shelf Gain Slider");
	lowShelfcut->setRange(20, 500, 0.5);        //Mu45:  step size
	lowShelfcut->setSliderStyle(Slider::LinearHorizontal);
	lowShelfcut->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	lowShelfcut->addListener(this);   // this is important!
	addAndMakeVisible(lowShelfcut);    //so is this!

	//low shelf gain
	lowShelfgain = new Slider("Low Shelf Gain Slider");
	lowShelfgain->setRange(-24,24,0.1);        //Mu45: can make dynamic by changing
	lowShelfgain->setSliderStyle(Slider::RotaryHorizontalDrag);
	lowShelfgain->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	lowShelfgain->addListener(this);   
	addAndMakeVisible(lowShelfgain);    

	//high shelf cut
	highShelfCutSlider = new Slider("High Shelf Cut Slider");
	highShelfCutSlider->setRange(2000, 20000, 0.5);        
	highShelfCutSlider->setSliderStyle(Slider::LinearHorizontal);
	highShelfCutSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	highShelfCutSlider->addListener(this);  
	addAndMakeVisible(highShelfCutSlider);    

	//high shelf gain
	highShelfGainSlider = new Slider("High Shelf Gain Slider");
	highShelfGainSlider->setRange(-24, 24, 0.1);      
	highShelfGainSlider->setSliderStyle(Slider::RotaryHorizontalDrag);
	highShelfGainSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	highShelfGainSlider->addListener(this);   
	addAndMakeVisible(highShelfGainSlider);    
	
	//notch cut
	notchCutSlider = new Slider("Notch Cut Slider");
	notchCutSlider->setRange(500, 2000, 0.5);
	notchCutSlider->setSliderStyle(Slider::LinearHorizontal);
	notchCutSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	notchCutSlider->addListener(this);
	addAndMakeVisible(notchCutSlider);

	//notch gain
	notchGainSlider = new Slider("Notch Gain Slider");
	notchGainSlider->setRange(-24, 24, 0.1);
	notchGainSlider->setSliderStyle(Slider::RotaryHorizontalDrag);
	notchGainSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	notchGainSlider->addListener(this);
	addAndMakeVisible(notchGainSlider);

	//notch Q
	notchQSlider = new Slider("Notch Q Slider");
	notchQSlider->setRange(0.1, 4, 0.1);
	notchQSlider->setSliderStyle(Slider::LinearHorizontal);
	notchQSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	notchQSlider->addListener(this);
	addAndMakeVisible(notchQSlider);

    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
    startTimer(100);    // This sets how often (in msec) the timerCallback() gets called.
}

Mu45effectAudioProcessorEditor::~Mu45effectAudioProcessorEditor()
{
}

//==============================================================================
void Mu45effectAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);
    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("EQ", getLocalBounds(), Justification::centredTop, 1);
	g.drawFittedText ("GAIN", 27, 0, 25, 15, Justification::top, 1);
	g.drawFittedText ("TREBLE", 300, 65, 50, 15, Justification::right, 1);
	g.drawFittedText ("MID", 300, 180, 50, 15, Justification::right, 1);
	g.drawFittedText ("BASS", 300, 255, 50, 15, Justification::right, 1);
}

void Mu45effectAudioProcessorEditor::resized()
{
    //Mu45Param: Set the location in the GUI for each UI component
	//int x = 20; int y = 60; int w = 50; int h = 200;
    //volumeSlider->setBounds(x, y, w, h);
	lowShelfgain->setBounds(25, 200, 75, 75); //rotary
	lowShelfcut->setBounds(150, 225, 200, 50); //horizontal

	highShelfGainSlider->setBounds(25, 15, 75, 75);
	highShelfCutSlider->setBounds(150, 35, 200, 50);
	
	notchGainSlider->setBounds(25, 105, 75, 75);
	notchCutSlider->setBounds(150, 100, 200, 50);
	notchQSlider->setBounds(150, 150, 200, 50);
}

//Mu45: This gets called whenever the user moves a slider
void Mu45effectAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    PluginParameter* parameter = nullptr;
    
    // Mu45Param: make an additional "else if" for each slider
    /*if (slider == volumeSlider) {
        parameter = processor.volumeUParam;
    }*/
    if (slider == lowShelfcut) {
        parameter = processor.lowshelfcutUparam;
    }
	else if (slider == lowShelfgain) {
		parameter = processor.lowshelfgainUparam;
	}
	else if (slider == highShelfCutSlider) {
		parameter = processor.highshelfcutUparam;
	}
	else if (slider == highShelfGainSlider) {
		parameter = processor.highshelfgainUparam;
	}
	else if (slider == notchCutSlider) {
		parameter = processor.notchcutUparam;
	}
	else if (slider == notchGainSlider) {
		parameter = processor.notchgainUparam;
	}
	else if (slider == notchQSlider) {
		parameter = processor.notchQUparam;
	}
    
    if (parameter != nullptr) {
        parameter->setValueNotifyingHost(parameter->calculateValue(slider->getValue()));
    }
}

    
    //Mu45:  This gets called every N msec so that sliders can update their value if the host changed them using parameter automation
void Mu45effectAudioProcessorEditor::timerCallback()
{
    //Mu45Param: Update the value of each slider to match the value in the Processor
    //volumeSlider->setValue(processor.volumeUParam->getActualValue(), dontSendNotification);
    lowShelfcut->setValue(processor.lowshelfcutUparam->getActualValue(), dontSendNotification);
	lowShelfgain->setValue(processor.lowshelfgainUparam->getActualValue(), dontSendNotification);
	highShelfCutSlider->setValue(processor.highshelfcutUparam->getActualValue(), dontSendNotification);
	highShelfGainSlider->setValue(processor.highshelfgainUparam->getActualValue(), dontSendNotification);
	notchCutSlider->setValue(processor.notchcutUparam->getActualValue(), dontSendNotification);
	notchGainSlider->setValue(processor.notchgainUparam->getActualValue(), dontSendNotification);
	notchQSlider->setValue(processor.notchQUparam->getActualValue(), dontSendNotification);
}



