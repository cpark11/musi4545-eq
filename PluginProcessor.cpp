/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Mu45effectAudioProcessor::Mu45effectAudioProcessor()
{
    //Mu45Param: Create and initialize a PluginParameter for each user parameter
    addParameter( volumeUParam = new PluginParameter("volume",     // parameterId
                                        5.0,         // actualDefaultValue
                                        0.0,         // actualMinimum
                                        11.0,        // actualMaximum
                                        "Volume",    // parameterName
                                        "dB"));      // parameterLabel (can be String::empty)

	// Low Shelf
	addParameter(lowshelfcutUparam = new PluginParameter("lowshelfcut",     // parameterId
		100.0,         // actualDefaultValue
		20.0,         // actualMinimum
		500.0,        // actualMaximum
		"Low Shelf Cut",    // parameterName
		"Hz"));      // parameterLabel (can be String::empty)
    
	addParameter(lowshelfgainUparam = new PluginParameter("lowshelfgain",     // parameterId
		0.0,         // actualDefaultValue
		-24.0,         // actualMinimum
		24.0,        // actualMaximum
		"Low Shelf Gain",    // parameterName
		"dB"));      // parameterLabel (can be String::empty)

	// High Shelf
	addParameter(highshelfcutUparam = new PluginParameter("highshelfcut",     // parameterId
		9000.0,         // actualDefaultValue
		2000.0,         // actualMinimum
		20000.0,        // actualMaximum
		"High Shelf Cut",    // parameterName
		"Hz"));      // parameterLabel (can be String::empty)

	addParameter(highshelfgainUparam = new PluginParameter("highshelfgain",     // parameterId
		0.0,         // actualDefaultValue
		-24.0,         // actualMinimum
		24.0,        // actualMaximum
		"High Shelf Gain",    // parameterName
		"dB"));      // parameterLabel (can be String::empty)

	//Notch
	addParameter(notchcutUparam = new PluginParameter("notchcut",     // parameterId
		750.0,         // actualDefaultValue
		500.0,         // actualMinimum
		2000.0,        // actualMaximum
		"Notch Cut",    // parameterName
		"Hz"));      // parameterLabel (can be String::empty)

	addParameter(notchgainUparam = new PluginParameter("notchgain",     // parameterId
		0.0,         // actualDefaultValue
		-24.0,         // actualMinimum
		24.0,        // actualMaximum
		"Notch Gain",    // parameterName
		"dB"));      // parameterLabel (can be String::empty)

	addParameter(notchQUparam = new PluginParameter("notchQ",     // parameterId
		2.0,         // actualDefaultValue
		0.1,         // actualMinimum
		4.0,        // actualMaximum
		"Notch Q",    // parameterName
		"Hz"));      // parameterLabel (can be String::empty)
}

Mu45effectAudioProcessor::~Mu45effectAudioProcessor()
{
}

//==============================================================================
const String Mu45effectAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool Mu45effectAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool Mu45effectAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool Mu45effectAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double Mu45effectAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int Mu45effectAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int Mu45effectAudioProcessor::getCurrentProgram()
{
    return 0;
}

void Mu45effectAudioProcessor::setCurrentProgram (int index)
{
}

const String Mu45effectAudioProcessor::getProgramName (int index)
{
    return String();
}

void Mu45effectAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
//Mu45: The following methods are where we will do most of our work
//==============================================================================

void Mu45effectAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    //Mu45: Do any initial calculations here that require the sample rate
    
    //Mu45: Initialize any member variables
    gainAParam = 0.0;
	sampRate = sampleRate;
}

void Mu45effectAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
    //Mu45: You may need to release memory here.
}

//Mu45: This function is a good place to calculate algorithm parameter values from user parameter values.
void Mu45effectAudioProcessor::calcAlgorithmParams()
{
    //gainAParam = 0.1 * volumeUParam->getActualValue();

	float lowShelfCoeff[5]; 
	lowshelfcutAparam = lowshelfcutUparam->getActualValue();
	lowshelfgainAparam = lowshelfgainUparam->getActualValue();
	Mu45FilterCalc::calcCoeffsLowShelf(lowShelfCoeff, lowshelfcutAparam, lowshelfgainAparam, sampRate);
	lowshelfFilterL.setCoefficients(lowShelfCoeff[0], lowShelfCoeff[1], lowShelfCoeff[2], lowShelfCoeff[3], lowShelfCoeff[4]);
	lowshelfFilterR.setCoefficients(lowShelfCoeff[0], lowShelfCoeff[1], lowShelfCoeff[2], lowShelfCoeff[3], lowShelfCoeff[4]);

	float highShelfCoeff[5];
	highshelfcutAparam = highshelfcutUparam->getActualValue();
	highshelfgainAparam = highshelfgainUparam->getActualValue();
	Mu45FilterCalc::calcCoeffsHighShelf(highShelfCoeff, highshelfcutAparam, highshelfgainAparam, sampRate);
	highshelfFilterL.setCoefficients(highShelfCoeff[0], highShelfCoeff[1], highShelfCoeff[2], highShelfCoeff[3], highShelfCoeff[4]);
	highshelfFilterR.setCoefficients(highShelfCoeff[0], highShelfCoeff[1], highShelfCoeff[2], highShelfCoeff[3], highShelfCoeff[4]);

	float notchCoeff[5];
	notchcutAparam = notchcutUparam->getActualValue();
	notchgainAparam = notchgainUparam->getActualValue();
	notchQAparam = notchQUparam->getActualValue();
	Mu45FilterCalc::calcCoeffsPeak(notchCoeff, notchcutAparam, notchgainAparam, notchQAparam, sampRate);
	notchFilterL.setCoefficients(notchCoeff[0], notchCoeff[1], notchCoeff[2], notchCoeff[3], notchCoeff[4]);
	notchFilterR.setCoefficients(notchCoeff[0], notchCoeff[1], notchCoeff[2], notchCoeff[3], notchCoeff[4]);
}


// Mu45: This is where audio actually gets changed!
void Mu45effectAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    const int totalNumInputChannels  = getTotalNumInputChannels();
    const int totalNumOutputChannels = getTotalNumOutputChannels();
    
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // This is here to avoid people getting screaming feedback
    // when they first compile a plugin, but obviously you don't need to keep
    // this code if your algorithm always overwrites all the output channels.
    for (int i = totalNumInputChannels; i < totalNumOutputChannels; ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
    
    //Mu45: Before we process a buffer, update the algorithm params!
    calcAlgorithmParams();
    
    // This version assumes we always have 2 channels
    float* left = buffer.getWritePointer (0);
    float* right = buffer.getWritePointer (1);
    const int numSamps = buffer.getNumSamples();
    
    //Mu45: This is the "inner loop" where we calculate each output sample
    for (int samp = 0; samp < numSamps; samp++)
    {
		left[samp] = lowshelfFilterL.tick(highshelfFilterL.tick(notchFilterL.tick(left[samp]))); 
		right[samp] = lowshelfFilterR.tick(highshelfFilterR.tick(notchFilterR.tick(right[samp])));
        //left[samp] = gainAParam * left[samp];
        //right[samp] = gainAParam * right[samp];
    }
}

//==============================================================================
bool Mu45effectAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* Mu45effectAudioProcessor::createEditor()
{
    return new Mu45effectAudioProcessorEditor (*this);
}

//==============================================================================
void Mu45effectAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void Mu45effectAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new Mu45effectAudioProcessor();
}
